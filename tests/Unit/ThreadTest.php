<?php

namespace Tests\Unit;

use App\Models\Channel;
use App\Models\Reply;
use App\Models\Thread;
use App\Models\User;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class ThreadTest extends TestCase
{
    use DatabaseMigrations;

    protected $thread;

    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread = Thread::factory()->create();

    }

    /** @test */
    public function a_thread_has_replies()
    {

        $this->assertInstanceOf(Collection::class,$this->thread->replies);
    }

    /** @test */
    function a_thread_has_owner()
    {
        $this->assertInstanceOf(User::class,$this->thread->creator);
    }

    /** @test */
    function a_thread_can_make_string_path()
    {
        $thread = create(Thread::class);
        $this->assertEquals('/threads/' . $thread->channel->slug .'/' . $thread->id, $thread->path());
    }

    /** @test */
    function a_thread_can_add_a_reply()
    {
        $this->thread->addReply(
            [
                'body' => 'foobar',
                'user_id' => 1
            ]
        );
        $this->assertCount(1,$this->thread->replies);
    }
    /** @test */
    function a_thread_has_a_channel(){
        $this->withoutExceptionHandling();
        $thread = create(Thread::class);
        $this->assertInstanceOf(Channel::class,$thread->channel);

    }

    /** @test */
    function a_thread_can_be_subscriped_to()
    {
        $thread = create('App\Models\Thread');

        $thread->subscribe($userId = 1);

        $this->assertEquals(
            1,
            $thread->subscriptions()->where('user_id', $userId)->count()
        );
    }

    /** @test */
    function a_thread_can_be_unsubscribed_from()
    {
        $thread = create('App\Models\Thread');

        $thread->subscribe($userId = 1);

        $thread->unsubscribe($userId);

        $this->assertCount(0, $thread->subscriptions);
    }

    /** @test */
    function it_knows_if_the_authenticated_user_is_subscribed_to_it()
    {
        $thread = create('App\Models\Thread');

        $this->signIn();

        $this->assertFalse($thread->isSubscribedTo);

        $thread->subscribe();

        $this->assertTrue($thread->isSubscribedTo);
    }
}
